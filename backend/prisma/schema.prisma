generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  username         String            @unique
  email            String            @unique
  password         String
  workoutTemplates WorkoutTemplate[]
  workoutSessions  WorkoutSession[]
  following        Follow[]          @relation("UserFollowing")
  followers        Follow[]          @relation("UserFollowers")
  votes            Vote[]
  chats            Chat[]            @relation("UserChats")
  sentMessages     Message[]         @relation("SentMessages")
  notifications    Notification[]
  userInterests    UserInterest?
  progressPhotos ProgressPhoto[]
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id])
  following   User     @relation("UserFollowers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model WorkoutTemplate {
  id              Int                       @id @default(autoincrement())
  userId          Int
  user            User                      @relation(fields: [userId], references: [id])
  name            String
  isPublic        Boolean                   @default(false)
  exercises       WorkoutTemplateExercise[]
  workoutSessions WorkoutSession[]
  copyCount       Int                       @default(0)
  votes           Vote[]
  createdAt       DateTime                  @default(now())
}

model WorkoutTemplateExercise {
  workoutTemplateId Int
  exerciseId        Int
  workoutTemplate   WorkoutTemplate @relation(fields: [workoutTemplateId], references: [id])
  exercise          Exercise        @relation(fields: [exerciseId], references: [id])

  @@id([workoutTemplateId, exerciseId])
}

model Exercise {
  id                       Int                       @id @default(autoincrement())
  name                     String                    @unique
  workoutTemplateExercises WorkoutTemplateExercise[]
  workoutSets              WorkoutSet[]
}

model WorkoutSession {
  id                Int              @id @default(autoincrement())
  userId            Int
  workoutTemplateId Int
  date              DateTime
  duration          Int // in seconds
  completionStatus  CompletionStatus
  user              User             @relation(fields: [userId], references: [id])
  workoutTemplate   WorkoutTemplate  @relation(fields: [workoutTemplateId], references: [id])
  workoutSets       WorkoutSet[]
  createdAt         DateTime         @default(now())
}

model WorkoutSet {
  id               Int            @id @default(autoincrement())
  workoutSessionId Int
  exerciseId       Int
  workoutSession   WorkoutSession @relation(fields: [workoutSessionId], references: [id])
  exercise         Exercise       @relation(fields: [exerciseId], references: [id])
  reps             Int
  weight           Float // In Pounds ( lbs )
}

model Vote {
  id                Int             @id @default(autoincrement())
  userId            Int
  workoutTemplateId Int
  voteType          VoteType
  user              User            @relation(fields: [userId], references: [id])
  workoutTemplate   WorkoutTemplate @relation(fields: [workoutTemplateId], references: [id])

  @@unique([userId, workoutTemplateId])
}

model Notification {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  type        String
  content     String
  createdAt   DateTime  @default(now())
  deliveredAt DateTime?
  status      String // "unsent", "selected", "sent"
}

model UserInterest {
  id              Int                    @id @default(autoincrement())
  userId          Int                    @unique
  user            User                   @relation(fields: [userId], references: [id])
  activityScore   Float
  lastWorkoutDate DateTime
  interests       UserInterestCategory[]
  updatedAt       DateTime               @updatedAt
}

model UserInterestCategory {
  id             Int          @id @default(autoincrement())
  userInterestId Int
  userInterest   UserInterest @relation(fields: [userInterestId], references: [id])
  category       String
  score          Float

  @@unique([userInterestId, category])
}

enum CompletionStatus {
  COMPLETED
  PARTIAL
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  senderId  Int
  chatId    Int
  timestamp DateTime @default(now())
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  chat      Chat     @relation(fields: [chatId], references: [id])
}

model Chat {
  id           Int       @id @default(autoincrement())
  participants User[]    @relation("UserChats")
  messages     Message[]
  createdAt    DateTime  @default(now())
}

model ProgressPhoto {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  imageUrl  String
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
